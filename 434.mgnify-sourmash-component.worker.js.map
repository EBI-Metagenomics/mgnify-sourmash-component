{"version":3,"sources":["webpack://mgnify-sourmash-component/./node_modules/sourmash/sourmash.js"],"names":["cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","Uint8Array","getStringFromWasm0","ptr","len","subarray","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","cachegetInt32Memory0","getInt32Memory0","Int32Array","KmerMinHash","obj","Object","create","prototype","this","num","ksize","is_protein","dayhoff","hp","seed","scaled","track_abundance","ret","__wrap","ptr0","malloc","realloc","undefined","mem","offset","code","charCodeAt","slice","passStringToWasm0","len0","r0","r1","__wbindgen_throw","arg0","arg1","Error"],"mappings":"4MAEA,IAAIA,EAAoB,IAAIC,YAAY,QAAS,CAAEC,WAAW,EAAMC,OAAO,IAE3EH,EAAkBI,SAElB,IAAIC,EAAuB,KAC3B,SAASC,IAIL,OAH6B,OAAzBD,GAAiCA,EAAqBE,SAAW,kBACjEF,EAAuB,IAAIG,WAAW,kBAEnCH,EAGX,SAASI,EAAmBC,EAAKC,GAC7B,OAAOX,EAAkBI,OAAOE,IAAkBM,SAASF,EAAKA,EAAMC,IAG1E,IAAIE,EAAkB,EAElBC,EAAoB,IAAIC,YAAY,SAExC,MAAMC,EAAwD,mBAAjCF,EAAkBG,WACzC,SAAUC,EAAKC,GACjB,OAAOL,EAAkBG,WAAWC,EAAKC,IAEvC,SAAUD,EAAKC,GACjB,MAAMC,EAAMN,EAAkBO,OAAOH,GAErC,OADAC,EAAKG,IAAIF,GACF,CACHG,KAAML,EAAIM,OACVC,QAASL,EAAII,SA0CrB,IAAIE,EAAuB,KAC3B,SAASC,IAIL,OAH6B,OAAzBD,GAAiCA,EAAqBnB,SAAW,kBACjEmB,EAAuB,IAAIE,WAAW,kBAEnCF,EAIJ,MAAMG,EAET,cAAcnB,GACV,MAAMoB,EAAMC,OAAOC,OAAOH,EAAYI,WAGtC,OAFAH,EAAIpB,IAAMA,EAEHoB,EAGX,OACI,MAAMpB,EAAMwB,KAAKxB,IACjBwB,KAAKxB,IAAM,EAEX,yBAA4BA,GAYhC,YAAYyB,EAAKC,EAAOC,EAAYC,EAASC,EAAIC,EAAMC,EAAQC,GAC3D,IAAIC,EAAM,8BAAiCR,EAAKC,EAAOC,EAAYC,EAASC,EAAIC,EAAMC,EAAQC,GAC9F,OAAOb,EAAYe,OAAOD,GAK9B,gBAAgBvB,GACZ,IAAIyB,EAhFZ,SAA2B3B,EAAK4B,EAAQC,GAEpC,QAAgBC,IAAZD,EAAuB,CACvB,MAAM3B,EAAMN,EAAkBO,OAAOH,GAC/BR,EAAMoC,EAAO1B,EAAII,QAGvB,OAFAlB,IAAkBM,SAASF,EAAKA,EAAMU,EAAII,QAAQF,IAAIF,GACtDP,EAAkBO,EAAII,OACfd,EAGX,IAAIC,EAAMO,EAAIM,OACVd,EAAMoC,EAAOnC,GAEjB,MAAMsC,EAAM3C,IAEZ,IAAI4C,EAAS,EAEb,KAAOA,EAASvC,EAAKuC,IAAU,CAC3B,MAAMC,EAAOjC,EAAIkC,WAAWF,GAC5B,GAAIC,EAAO,IAAM,MACjBF,EAAIvC,EAAMwC,GAAUC,EAGxB,GAAID,IAAWvC,EAAK,CACD,IAAXuC,IACAhC,EAAMA,EAAImC,MAAMH,IAEpBxC,EAAMqC,EAAQrC,EAAKC,EAAKA,EAAMuC,EAAsB,EAAbhC,EAAIM,QAC3C,MAAML,EAAOb,IAAkBM,SAASF,EAAMwC,EAAQxC,EAAMC,GAG5DuC,GAFYlC,EAAaE,EAAKC,GAEhBM,QAIlB,OADAZ,EAAkBqC,EACXxC,EA6CQ4C,CAAkBlC,EAAK,oBAAwB,sBACtDmC,EAAO1C,EACX,8BAAiCqB,KAAKxB,IAAKmC,EAAMU,GAKrD,UACI,IACI,sBAAyB,EAAGrB,KAAKxB,KACjC,IAAI8C,EAAK7B,IAAkB,GACvB8B,EAAK9B,IAAkB,GAC3B,OAAOlB,EAAmB+C,EAAIC,GAChC,QACE,kBAAqBD,EAAIC,KAK9B,MAAMC,EAAmB,SAASC,EAAMC,GAC3C,MAAM,IAAIC,MAAMpD,EAAmBkD,EAAMC,M","file":"434.mgnify-sourmash-component.worker.js","sourcesContent":["import * as wasm from './sourmash_bg.wasm';\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n/**\n*/\nexport class KmerMinHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KmerMinHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_kmerminhash_free(ptr);\n    }\n    /**\n    * @param {number} num\n    * @param {number} ksize\n    * @param {boolean} is_protein\n    * @param {boolean} dayhoff\n    * @param {boolean} hp\n    * @param {number} seed\n    * @param {number} scaled\n    * @param {boolean} track_abundance\n    */\n    constructor(num, ksize, is_protein, dayhoff, hp, seed, scaled, track_abundance) {\n        var ret = wasm.kmerminhash_new_with_scaled(num, ksize, is_protein, dayhoff, hp, seed, scaled, track_abundance);\n        return KmerMinHash.__wrap(ret);\n    }\n    /**\n    * @param {string} buf\n    */\n    add_sequence_js(buf) {\n        var ptr0 = passStringToWasm0(buf, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.kmerminhash_add_sequence_js(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            wasm.kmerminhash_to_json(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n"],"sourceRoot":""}